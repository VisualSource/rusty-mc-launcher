// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  SearchProjectsData,
  SearchProjectsResponse,
  GetProjectData,
  GetProjectResponse,
  ModifyProjectData,
  ModifyProjectResponse,
  DeleteProjectData,
  DeleteProjectResponse,
  GetProjectsData,
  GetProjectsResponse,
  PatchProjectsData,
  PatchProjectsResponse,
  RandomProjectsData,
  RandomProjectsResponse,
  CreateProjectData,
  CreateProjectResponse,
  ChangeProjectIconData,
  ChangeProjectIconResponse,
  DeleteProjectIconData,
  DeleteProjectIconResponse,
  CheckProjectValidityData,
  CheckProjectValidityResponse,
  AddGalleryImageData,
  AddGalleryImageResponse,
  ModifyGalleryImageData,
  ModifyGalleryImageResponse,
  DeleteGalleryImageData,
  DeleteGalleryImageResponse,
  GetDependenciesData,
  GetDependenciesResponse,
  FollowProjectData,
  FollowProjectResponse,
  UnfollowProjectData,
  UnfollowProjectResponse,
  ScheduleProjectData,
  ScheduleProjectResponse,
  GetProjectVersionsData,
  GetProjectVersionsResponse,
  GetVersionData,
  GetVersionResponse,
  ModifyVersionData,
  ModifyVersionResponse,
  DeleteVersionData,
  DeleteVersionResponse,
  GetVersionFromIdOrNumberData,
  GetVersionFromIdOrNumberResponse,
  CreateVersionData,
  CreateVersionResponse,
  ScheduleVersionData,
  ScheduleVersionResponse,
  GetVersionsData,
  GetVersionsResponse,
  AddFilesToVersionData,
  AddFilesToVersionResponse,
  VersionFromHashData,
  VersionFromHashResponse,
  DeleteFileFromHashData,
  DeleteFileFromHashResponse,
  GetLatestVersionFromHashData,
  GetLatestVersionFromHashResponse,
  VersionsFromHashesData,
  VersionsFromHashesResponse,
  GetLatestVersionsFromHashesData,
  GetLatestVersionsFromHashesResponse,
  GetUserData,
  GetUserResponse,
  ModifyUserData,
  ModifyUserResponse,
  GetUserFromAuthResponse,
  GetUsersData,
  GetUsersResponse,
  ChangeUserIconData,
  ChangeUserIconResponse,
  GetUserProjectsData,
  GetUserProjectsResponse,
  GetFollowedProjectsData,
  GetFollowedProjectsResponse,
  GetPayoutHistoryData,
  GetPayoutHistoryResponse,
  WithdrawPayoutData,
  WithdrawPayoutResponse,
  GetUserNotificationsData,
  GetUserNotificationsResponse,
  GetNotificationData,
  GetNotificationResponse,
  ReadNotificationData,
  ReadNotificationResponse,
  DeleteNotificationData,
  DeleteNotificationResponse,
  GetNotificationsData,
  GetNotificationsResponse,
  ReadNotificationsData,
  ReadNotificationsResponse,
  DeleteNotificationsData,
  DeleteNotificationsResponse,
  SubmitReportData,
  SubmitReportResponse,
  GetOpenReportsData,
  GetOpenReportsResponse,
  GetReportData,
  GetReportResponse,
  ModifyReportData,
  ModifyReportResponse,
  GetReportsData,
  GetReportsResponse,
  GetThreadData,
  GetThreadResponse,
  SendThreadMessageData,
  SendThreadMessageResponse,
  GetThreadsData,
  GetThreadsResponse,
  DeleteThreadMessageData,
  DeleteThreadMessageResponse,
  GetProjectTeamMembersData,
  GetProjectTeamMembersResponse,
  GetTeamMembersData,
  GetTeamMembersResponse,
  AddTeamMemberData,
  AddTeamMemberResponse,
  GetTeamsData,
  GetTeamsResponse,
  JoinTeamData,
  JoinTeamResponse,
  ModifyTeamMemberData,
  ModifyTeamMemberResponse,
  DeleteTeamMemberData,
  DeleteTeamMemberResponse,
  TransferTeamOwnershipData,
  TransferTeamOwnershipResponse,
  CategoryListResponse,
  LoaderListResponse,
  VersionListResponse,
  LicenseListResponse,
  LicenseTextData,
  LicenseTextResponse,
  DonationPlatformListResponse,
  ReportTypeListResponse,
  ProjectTypeListResponse,
  SideTypeListResponse,
  ForgeUpdatesData,
  ForgeUpdatesResponse,
  StatisticsResponse,
} from "./types.gen";

export class ProjectsService {
  /**
   * Search projects
   * @param data The data for the request.
   * @param data.query The query to search for
   * @param data.facets Facets are an essential concept for understanding how to filter out results.
   *
   * These are the most commonly used facet types:
   * - `project_type`
   * - `categories` (loaders are lumped in with categories in search)
   * - `versions`
   * - `client_side`
   * - `server_side`
   * - `open_source`
   *
   * Several others are also available for use, though these should not be used outside very specific use cases.
   * - `title`
   * - `author`
   * - `follows`
   * - `project_id`
   * - `license`
   * - `downloads`
   * - `color`
   * - `created_timestamp`
   * - `modified_timestamp`
   *
   * In order to then use these facets, you need a value to filter by, as well as an operation to perform on this value.
   * The most common operation is `:` (same as `=`), though you can also use `!=`, `>=`, `>`, `<=`, and `<`.
   * Join together the type, operation, and value, and you've got your string.
   * ```
   * {type} {operation} {value}
   * ```
   *
   * Examples:
   * ```
   * categories = adventure
   * versions != 1.20.1
   * downloads <= 100
   * ```
   *
   * You then join these strings together in arrays to signal `AND` and `OR` operators.
   *
   * ##### OR
   * All elements in a single array are considered to be joined by OR statements.
   * For example, the search `[["versions:1.16.5", "versions:1.17.1"]]` translates to `Projects that support 1.16.5 OR 1.17.1`.
   *
   * ##### AND
   * Separate arrays are considered to be joined by AND statements.
   * For example, the search `[["versions:1.16.5"], ["project_type:modpack"]]` translates to `Projects that support 1.16.5 AND are modpacks`.
   *
   * @param data.index The sorting method used for sorting search results
   * @param data.offset The offset into the search. Skips this number of results
   * @param data.limit The number of results returned by the search
   * @returns SearchResults Expected response to a valid request
   * @throws ApiError
   */
  public static searchProjects(
    data: SearchProjectsData = {},
  ): CancelablePromise<SearchProjectsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/search",
      query: {
        query: data.query,
        facets: data.facets,
        index: data.index,
        offset: data.offset,
        limit: data.limit,
      },
      errors: {
        400: "Request was invalid, see given error",
      },
    });
  }

  /**
   * Get a project
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @returns Project Expected response to a valid request
   * @throws ApiError
   */
  public static getProject(
    data: GetProjectData,
  ): CancelablePromise<GetProjectResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/project/{id|slug}",
      path: {
        "id|slug": data.idSlug,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Modify a project
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @param data.requestBody Modified project fields
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static modifyProject(
    data: ModifyProjectData,
  ): CancelablePromise<ModifyProjectResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/project/{id|slug}",
      path: {
        "id|slug": data.idSlug,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Delete a project
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static deleteProject(
    data: DeleteProjectData,
  ): CancelablePromise<DeleteProjectResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/project/{id|slug}",
      path: {
        "id|slug": data.idSlug,
      },
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get multiple projects
   * @param data The data for the request.
   * @param data.ids The IDs and/or slugs of the projects
   * @returns Project Expected response to a valid request
   * @throws ApiError
   */
  public static getProjects(
    data: GetProjectsData,
  ): CancelablePromise<GetProjectsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/projects",
      query: {
        ids: data.ids,
      },
    });
  }

  /**
   * Bulk-edit multiple projects
   * @param data The data for the request.
   * @param data.ids The IDs and/or slugs of the projects
   * @param data.requestBody Fields to edit on all projects specified
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static patchProjects(
    data: PatchProjectsData,
  ): CancelablePromise<PatchProjectsResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/projects",
      query: {
        ids: data.ids,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get a list of random projects
   * @param data The data for the request.
   * @param data.count The number of random projects to return
   * @returns Project Expected response to a valid request
   * @throws ApiError
   */
  public static randomProjects(
    data: RandomProjectsData,
  ): CancelablePromise<RandomProjectsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/projects_random",
      query: {
        count: data.count,
      },
      errors: {
        400: "Request was invalid, see given error",
      },
    });
  }

  /**
   * Create a project
   * @param data The data for the request.
   * @param data.formData New project
   * @returns Project Expected response to a valid request
   * @throws ApiError
   */
  public static createProject(
    data: CreateProjectData = {},
  ): CancelablePromise<CreateProjectResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/project",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Change project's icon
   * The new icon may be up to 256KiB in size.
   * @param data The data for the request.
   * @param data.ext Image extension
   * @param data.idSlug The ID or slug of the project
   * @param data.requestBody
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static changeProjectIcon(
    data: ChangeProjectIconData,
  ): CancelablePromise<ChangeProjectIconResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/project/{id|slug}/icon",
      path: {
        "id|slug": data.idSlug,
      },
      query: {
        ext: data.ext,
      },
      body: data.requestBody,
      mediaType: "image/png",
      errors: {
        400: "Request was invalid, see given error",
      },
    });
  }

  /**
   * Delete project's icon
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static deleteProjectIcon(
    data: DeleteProjectIconData,
  ): CancelablePromise<DeleteProjectIconResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/project/{id|slug}/icon",
      path: {
        "id|slug": data.idSlug,
      },
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Check project slug/ID validity
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @returns ProjectIdentifier Expected response to a valid request
   * @throws ApiError
   */
  public static checkProjectValidity(
    data: CheckProjectValidityData,
  ): CancelablePromise<CheckProjectValidityResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/project/{id|slug}/check",
      path: {
        "id|slug": data.idSlug,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Add a gallery image
   * Modrinth allows you to upload files of up to 5MiB to a project's gallery.
   * @param data The data for the request.
   * @param data.ext Image extension
   * @param data.featured Whether an image is featured
   * @param data.idSlug The ID or slug of the project
   * @param data.title Title of the image
   * @param data.description Description of the image
   * @param data.ordering Ordering of the image
   * @param data.requestBody
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static addGalleryImage(
    data: AddGalleryImageData,
  ): CancelablePromise<AddGalleryImageResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/project/{id|slug}/gallery",
      path: {
        "id|slug": data.idSlug,
      },
      query: {
        ext: data.ext,
        featured: data.featured,
        title: data.title,
        description: data.description,
        ordering: data.ordering,
      },
      body: data.requestBody,
      mediaType: "image/png",
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Modify a gallery image
   * @param data The data for the request.
   * @param data.url URL link of the image to modify
   * @param data.idSlug The ID or slug of the project
   * @param data.featured Whether the image is featured
   * @param data.title New title of the image
   * @param data.description New description of the image
   * @param data.ordering New ordering of the image
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static modifyGalleryImage(
    data: ModifyGalleryImageData,
  ): CancelablePromise<ModifyGalleryImageResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/project/{id|slug}/gallery",
      path: {
        "id|slug": data.idSlug,
      },
      query: {
        url: data.url,
        featured: data.featured,
        title: data.title,
        description: data.description,
        ordering: data.ordering,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Delete a gallery image
   * @param data The data for the request.
   * @param data.url URL link of the image to delete
   * @param data.idSlug The ID or slug of the project
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static deleteGalleryImage(
    data: DeleteGalleryImageData,
  ): CancelablePromise<DeleteGalleryImageResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/project/{id|slug}/gallery",
      path: {
        "id|slug": data.idSlug,
      },
      query: {
        url: data.url,
      },
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get all of a project's dependencies
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @returns ProjectDependencyList Expected response to a valid request
   * @throws ApiError
   */
  public static getDependencies(
    data: GetDependenciesData,
  ): CancelablePromise<GetDependenciesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/project/{id|slug}/dependencies",
      path: {
        "id|slug": data.idSlug,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Follow a project
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static followProject(
    data: FollowProjectData,
  ): CancelablePromise<FollowProjectResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/project/{id|slug}/follow",
      path: {
        "id|slug": data.idSlug,
      },
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Unfollow a project
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static unfollowProject(
    data: UnfollowProjectData,
  ): CancelablePromise<UnfollowProjectResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/project/{id|slug}/follow",
      path: {
        "id|slug": data.idSlug,
      },
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Schedule a project
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @param data.requestBody Information about date and requested status
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static scheduleProject(
    data: ScheduleProjectData,
  ): CancelablePromise<ScheduleProjectResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/project/{id|slug}/schedule",
      path: {
        "id|slug": data.idSlug,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }
}

export class VersionsService {
  /**
   * List project's versions
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @param data.loaders The types of loaders to filter for
   * @param data.gameVersions The game versions to filter for
   * @param data.featured Allows to filter for featured or non-featured versions only
   * @returns Version Expected response to a valid request
   * @throws ApiError
   */
  public static getProjectVersions(
    data: GetProjectVersionsData,
  ): CancelablePromise<GetProjectVersionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/project/{id|slug}/version",
      path: {
        "id|slug": data.idSlug,
      },
      query: {
        loaders: data.loaders,
        game_versions: data.gameVersions,
        featured: data.featured,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get a version
   * @param data The data for the request.
   * @param data.id The ID of the version
   * @returns Version Expected response to a valid request
   * @throws ApiError
   */
  public static getVersion(
    data: GetVersionData,
  ): CancelablePromise<GetVersionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/version/{id}",
      path: {
        id: data.id,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Modify a version
   * @param data The data for the request.
   * @param data.id The ID of the version
   * @param data.requestBody Modified version fields
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static modifyVersion(
    data: ModifyVersionData,
  ): CancelablePromise<ModifyVersionResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/version/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Delete a version
   * @param data The data for the request.
   * @param data.id The ID of the version
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static deleteVersion(
    data: DeleteVersionData,
  ): CancelablePromise<DeleteVersionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/version/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get a version given a version number or ID
   * Please note that, if the version number provided matches multiple versions, only the **oldest matching version** will be returned.
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @param data.idNumber The version ID or version number
   * @returns Version Expected response to a valid request
   * @throws ApiError
   */
  public static getVersionFromIdOrNumber(
    data: GetVersionFromIdOrNumberData,
  ): CancelablePromise<GetVersionFromIdOrNumberResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/project/{id|slug}/version/{id|number}",
      path: {
        "id|slug": data.idSlug,
        "id|number": data.idNumber,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Create a version
   * This route creates a version on an existing project. There must be at least one file attached to each new version, unless the new version's status is `draft`. `.mrpack`, `.jar`, `.zip`, and `.litemod` files are accepted.
   *
   * The request is a [multipart request](https://www.ietf.org/rfc/rfc2388.txt) with at least two form fields: one is `data`, which includes a JSON body with the version metadata as shown below, and at least one field containing an upload file.
   *
   * You can name the file parts anything you would like, but you must list each of the parts' names in `file_parts`, and optionally, provide one to use as the primary file in `primary_file`.
   *
   * @param data The data for the request.
   * @param data.formData New version
   * @returns Version Expected response to a valid request
   * @throws ApiError
   */
  public static createVersion(
    data: CreateVersionData = {},
  ): CancelablePromise<CreateVersionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/version",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Schedule a version
   * @param data The data for the request.
   * @param data.id The ID of the version
   * @param data.requestBody Information about date and requested status
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static scheduleVersion(
    data: ScheduleVersionData,
  ): CancelablePromise<ScheduleVersionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/version/{id}/schedule",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get multiple versions
   * @param data The data for the request.
   * @param data.ids The IDs of the versions
   * @returns Version Expected response to a valid request
   * @throws ApiError
   */
  public static getVersions(
    data: GetVersionsData,
  ): CancelablePromise<GetVersionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/versions",
      query: {
        ids: data.ids,
      },
    });
  }

  /**
   * Add files to version
   * Project files are attached. `.mrpack` and `.jar` files are accepted.
   * @param data The data for the request.
   * @param data.id The ID of the version
   * @param data.formData New version files
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static addFilesToVersion(
    data: AddFilesToVersionData,
  ): CancelablePromise<AddFilesToVersionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/version/{id}/file",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }
}

export class VersionFilesService {
  /**
   * Get version from hash
   * @param data The data for the request.
   * @param data.hash The hash of the file, considering its byte content, and encoded in hexadecimal
   * @param data.multiple Whether to return multiple results when looking for this hash
   * @param data.algorithm The algorithm of the hash
   * @returns Version Expected response to a valid request
   * @throws ApiError
   */
  public static versionFromHash(
    data: VersionFromHashData,
  ): CancelablePromise<VersionFromHashResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/version_file/{hash}",
      path: {
        hash: data.hash,
      },
      query: {
        multiple: data.multiple,
        algorithm: data.algorithm,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Delete a file from its hash
   * @param data The data for the request.
   * @param data.hash The hash of the file, considering its byte content, and encoded in hexadecimal
   * @param data.versionId Version ID to delete the version from, if multiple files of the same hash exist
   * @param data.algorithm The algorithm of the hash
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static deleteFileFromHash(
    data: DeleteFileFromHashData,
  ): CancelablePromise<DeleteFileFromHashResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/version_file/{hash}",
      path: {
        hash: data.hash,
      },
      query: {
        version_id: data.versionId,
        algorithm: data.algorithm,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Latest version of a project from a hash, loader(s), and game version(s)
   * @param data The data for the request.
   * @param data.hash The hash of the file, considering its byte content, and encoded in hexadecimal
   * @param data.requestBody Parameters of the updated version requested
   * @param data.algorithm The algorithm of the hash
   * @returns Version Expected response to a valid request
   * @throws ApiError
   */
  public static getLatestVersionFromHash(
    data: GetLatestVersionFromHashData,
  ): CancelablePromise<GetLatestVersionFromHashResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/version_file/{hash}/update",
      path: {
        hash: data.hash,
      },
      query: {
        algorithm: data.algorithm,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Request was invalid, see given error",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get versions from hashes
   * This is the same as [`/version_file/{hash}`](#operation/versionFromHash) except it accepts multiple hashes.
   * @param data The data for the request.
   * @param data.requestBody Hashes and algorithm of the versions requested
   * @returns HashVersionMap Expected response to a valid request
   * @throws ApiError
   */
  public static versionsFromHashes(
    data: VersionsFromHashesData = {},
  ): CancelablePromise<VersionsFromHashesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/version_files",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Request was invalid, see given error",
      },
    });
  }

  /**
   * Latest versions of multiple project from hashes, loader(s), and game version(s)
   * This is the same as [`/version_file/{hash}/update`](#operation/getLatestVersionFromHash) except it accepts multiple hashes.
   * @param data The data for the request.
   * @param data.requestBody Parameters of the updated version requested
   * @returns HashVersionMap Expected response to a valid request
   * @throws ApiError
   */
  public static getLatestVersionsFromHashes(
    data: GetLatestVersionsFromHashesData = {},
  ): CancelablePromise<GetLatestVersionsFromHashesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/version_files/update",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Request was invalid, see given error",
      },
    });
  }
}

export class UsersService {
  /**
   * Get a user
   * @param data The data for the request.
   * @param data.idUsername The ID or username of the user
   * @returns User Expected response to a valid request
   * @throws ApiError
   */
  public static getUser(data: GetUserData): CancelablePromise<GetUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/user/{id|username}",
      path: {
        "id|username": data.idUsername,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Modify a user
   * @param data The data for the request.
   * @param data.idUsername The ID or username of the user
   * @param data.requestBody Modified user fields
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static modifyUser(
    data: ModifyUserData,
  ): CancelablePromise<ModifyUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/user/{id|username}",
      path: {
        "id|username": data.idUsername,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get user from authorization header
   * @returns User Expected response to a valid request
   * @throws ApiError
   */
  public static getUserFromAuth(): CancelablePromise<GetUserFromAuthResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/user",
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get multiple users
   * @param data The data for the request.
   * @param data.ids The IDs of the users
   * @returns User Expected response to a valid request
   * @throws ApiError
   */
  public static getUsers(
    data: GetUsersData,
  ): CancelablePromise<GetUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users",
      query: {
        ids: data.ids,
      },
    });
  }

  /**
   * Change user's avatar
   * The new avatar may be up to 2MiB in size.
   * @param data The data for the request.
   * @param data.idUsername The ID or username of the user
   * @param data.requestBody
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static changeUserIcon(
    data: ChangeUserIconData,
  ): CancelablePromise<ChangeUserIconResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/user/{id|username}/icon",
      path: {
        "id|username": data.idUsername,
      },
      body: data.requestBody,
      mediaType: "image/png",
      errors: {
        400: "Request was invalid, see given error",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get user's projects
   * @param data The data for the request.
   * @param data.idUsername The ID or username of the user
   * @returns Project Expected response to a valid request
   * @throws ApiError
   */
  public static getUserProjects(
    data: GetUserProjectsData,
  ): CancelablePromise<GetUserProjectsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/user/{id|username}/projects",
      path: {
        "id|username": data.idUsername,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get user's followed projects
   * @param data The data for the request.
   * @param data.idUsername The ID or username of the user
   * @returns Project Expected response to a valid request
   * @throws ApiError
   */
  public static getFollowedProjects(
    data: GetFollowedProjectsData,
  ): CancelablePromise<GetFollowedProjectsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/user/{id|username}/follows",
      path: {
        "id|username": data.idUsername,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get user's payout history
   * @param data The data for the request.
   * @param data.idUsername The ID or username of the user
   * @returns UserPayoutHistory Expected response to a valid request
   * @throws ApiError
   */
  public static getPayoutHistory(
    data: GetPayoutHistoryData,
  ): CancelablePromise<GetPayoutHistoryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/user/{id|username}/payouts",
      path: {
        "id|username": data.idUsername,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Withdraw payout balance to PayPal or Venmo
   * Warning: certain amounts get withheld for fees. Please do not call this API endpoint without first acknowledging the warnings on the corresponding frontend page.
   * @param data The data for the request.
   * @param data.amount Amount to withdraw
   * @param data.idUsername The ID or username of the user
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static withdrawPayout(
    data: WithdrawPayoutData,
  ): CancelablePromise<WithdrawPayoutResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/user/{id|username}/payouts",
      path: {
        "id|username": data.idUsername,
      },
      query: {
        amount: data.amount,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }
}

export class NotificationsService {
  /**
   * Get user's notifications
   * @param data The data for the request.
   * @param data.idUsername The ID or username of the user
   * @returns Notification Expected response to a valid request
   * @throws ApiError
   */
  public static getUserNotifications(
    data: GetUserNotificationsData,
  ): CancelablePromise<GetUserNotificationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/user/{id|username}/notifications",
      path: {
        "id|username": data.idUsername,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get notification from ID
   * @param data The data for the request.
   * @param data.id The ID of the notification
   * @returns Notification Expected response to a valid request
   * @throws ApiError
   */
  public static getNotification(
    data: GetNotificationData,
  ): CancelablePromise<GetNotificationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/notification/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Mark notification as read
   * @param data The data for the request.
   * @param data.id The ID of the notification
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static readNotification(
    data: ReadNotificationData,
  ): CancelablePromise<ReadNotificationResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/notification/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Delete notification
   * @param data The data for the request.
   * @param data.id The ID of the notification
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static deleteNotification(
    data: DeleteNotificationData,
  ): CancelablePromise<DeleteNotificationResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/notification/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get multiple notifications
   * @param data The data for the request.
   * @param data.ids The IDs of the notifications
   * @returns Notification Expected response to a valid request
   * @throws ApiError
   */
  public static getNotifications(
    data: GetNotificationsData,
  ): CancelablePromise<GetNotificationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/notifications",
      query: {
        ids: data.ids,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Mark multiple notifications as read
   * @param data The data for the request.
   * @param data.ids The IDs of the notifications
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static readNotifications(
    data: ReadNotificationsData,
  ): CancelablePromise<ReadNotificationsResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/notifications",
      query: {
        ids: data.ids,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Delete multiple notifications
   * @param data The data for the request.
   * @param data.ids The IDs of the notifications
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static deleteNotifications(
    data: DeleteNotificationsData,
  ): CancelablePromise<DeleteNotificationsResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/notifications",
      query: {
        ids: data.ids,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }
}

export class ThreadsService {
  /**
   * Report a project, user, or version
   * Bring a project, user, or version to the attention of the moderators by reporting it.
   * @param data The data for the request.
   * @param data.requestBody The report to be sent
   * @returns Report Expected response to a valid request
   * @throws ApiError
   */
  public static submitReport(
    data: SubmitReportData = {},
  ): CancelablePromise<SubmitReportResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/report",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get your open reports
   * @param data The data for the request.
   * @param data.count
   * @returns Report Expected response to a valid request
   * @throws ApiError
   */
  public static getOpenReports(
    data: GetOpenReportsData = {},
  ): CancelablePromise<GetOpenReportsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/report",
      query: {
        count: data.count,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get report from ID
   * @param data The data for the request.
   * @param data.id The ID of the report
   * @returns Report Expected response to a valid request
   * @throws ApiError
   */
  public static getReport(
    data: GetReportData,
  ): CancelablePromise<GetReportResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/report/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Modify a report
   * @param data The data for the request.
   * @param data.id The ID of the report
   * @param data.requestBody What to modify about the report
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static modifyReport(
    data: ModifyReportData,
  ): CancelablePromise<ModifyReportResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/report/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Request was invalid, see given error",
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get multiple reports
   * @param data The data for the request.
   * @param data.ids The IDs of the reports
   * @returns Report Expected response to a valid request
   * @throws ApiError
   */
  public static getReports(
    data: GetReportsData,
  ): CancelablePromise<GetReportsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/reports",
      query: {
        ids: data.ids,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get a thread
   * @param data The data for the request.
   * @param data.id The ID of the thread
   * @returns Thread Expected response to a valid request
   * @throws ApiError
   */
  public static getThread(
    data: GetThreadData,
  ): CancelablePromise<GetThreadResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/thread/{id}",
      path: {
        id: data.id,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Send a text message to a thread
   * @param data The data for the request.
   * @param data.id The ID of the thread
   * @param data.requestBody The message to be sent. Note that you only need the fields applicable for the `text` type.
   * @returns Thread Expected response to a valid request
   * @throws ApiError
   */
  public static sendThreadMessage(
    data: SendThreadMessageData,
  ): CancelablePromise<SendThreadMessageResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/thread/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Request was invalid, see given error",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get multiple threads
   * @param data The data for the request.
   * @param data.ids The IDs of the threads
   * @returns Thread Expected response to a valid request
   * @throws ApiError
   */
  public static getThreads(
    data: GetThreadsData,
  ): CancelablePromise<GetThreadsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/threads",
      query: {
        ids: data.ids,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Delete a thread message
   * @param data The data for the request.
   * @param data.id The ID of the message
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static deleteThreadMessage(
    data: DeleteThreadMessageData,
  ): CancelablePromise<DeleteThreadMessageResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/message/{id}",
      path: {
        id: data.id,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }
}

export class TeamsService {
  /**
   * Get a project's team members
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @returns TeamMember Expected response to a valid request
   * @throws ApiError
   */
  public static getProjectTeamMembers(
    data: GetProjectTeamMembersData,
  ): CancelablePromise<GetProjectTeamMembersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/project/{id|slug}/members",
      path: {
        "id|slug": data.idSlug,
      },
      errors: {
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get a team's members
   * @param data The data for the request.
   * @param data.id The ID of the team
   * @returns TeamMember Expected response to a valid request
   * @throws ApiError
   */
  public static getTeamMembers(
    data: GetTeamMembersData,
  ): CancelablePromise<GetTeamMembersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/team/{id}/members",
      path: {
        id: data.id,
      },
    });
  }

  /**
   * Add a user to a team
   * @param data The data for the request.
   * @param data.id The ID of the team
   * @param data.requestBody User to be added (must be the ID, usernames cannot be used here)
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static addTeamMember(
    data: AddTeamMemberData,
  ): CancelablePromise<AddTeamMemberResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/team/{id}/members",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Get the members of multiple teams
   * @param data The data for the request.
   * @param data.ids The IDs of the teams
   * @returns TeamMember Expected response to a valid request
   * @throws ApiError
   */
  public static getTeams(
    data: GetTeamsData,
  ): CancelablePromise<GetTeamsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/teams",
      query: {
        ids: data.ids,
      },
    });
  }

  /**
   * Join a team
   * @param data The data for the request.
   * @param data.id The ID of the team
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static joinTeam(
    data: JoinTeamData,
  ): CancelablePromise<JoinTeamResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/team/{id}/join",
      path: {
        id: data.id,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Modify a team member's information
   * @param data The data for the request.
   * @param data.id The ID of the team
   * @param data.idUsername The ID or username of the user
   * @param data.requestBody Contents to be modified
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static modifyTeamMember(
    data: ModifyTeamMemberData,
  ): CancelablePromise<ModifyTeamMemberResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/team/{id}/members/{id|username}",
      path: {
        id: data.id,
        "id|username": data.idUsername,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Remove a member from a team
   * @param data The data for the request.
   * @param data.id The ID of the team
   * @param data.idUsername The ID or username of the user
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static deleteTeamMember(
    data: DeleteTeamMemberData,
  ): CancelablePromise<DeleteTeamMemberResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/team/{id}/members/{id|username}",
      path: {
        id: data.id,
        "id|username": data.idUsername,
      },
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }

  /**
   * Transfer team's ownership to another user
   * @param data The data for the request.
   * @param data.id The ID of the team
   * @param data.requestBody New owner's ID
   * @returns void Expected response to a valid request
   * @throws ApiError
   */
  public static transferTeamOwnership(
    data: TransferTeamOwnershipData,
  ): CancelablePromise<TransferTeamOwnershipResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/team/{id}/owner",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Incorrect token scopes or no authorization to access the requested item(s)",
        404: "The requested item(s) were not found or no authorization to access the requested item(s)",
      },
    });
  }
}

export class TagsService {
  /**
   * Get a list of categories
   * Gets an array of categories, their icons, and applicable project types
   * @returns CategoryTag Expected response to a valid request
   * @throws ApiError
   */
  public static categoryList(): CancelablePromise<CategoryListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/tag/category",
    });
  }

  /**
   * Get a list of loaders
   * Gets an array of loaders, their icons, and supported project types
   * @returns LoaderTag Expected response to a valid request
   * @throws ApiError
   */
  public static loaderList(): CancelablePromise<LoaderListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/tag/loader",
    });
  }

  /**
   * Get a list of game versions
   * Gets an array of game versions and information about them
   * @returns GameVersionTag Expected response to a valid request
   * @throws ApiError
   */
  public static versionList(): CancelablePromise<VersionListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/tag/game_version",
    });
  }

  /**
   * @deprecated
   * Get a list of licenses
   * Deprecated - simply use SPDX IDs.
   * @returns LicenseTag Expected response to a valid request
   * @throws ApiError
   */
  public static licenseList(): CancelablePromise<LicenseListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/tag/license",
    });
  }

  /**
   * Get the text and title of a license
   * @param data The data for the request.
   * @param data.id The license ID to get the text of
   * @returns License Expected response to a valid request
   * @throws ApiError
   */
  public static licenseText(
    data: LicenseTextData,
  ): CancelablePromise<LicenseTextResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/tag/license/{id}",
      path: {
        id: data.id,
      },
      errors: {
        400: "Request was invalid, see given error",
      },
    });
  }

  /**
   * Get a list of donation platforms
   * Gets an array of donation platforms and information about them
   * @returns DonationPlatformTag Expected response to a valid request
   * @throws ApiError
   */
  public static donationPlatformList(): CancelablePromise<DonationPlatformListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/tag/donation_platform",
    });
  }

  /**
   * Get a list of report types
   * Gets an array of valid report types
   * @returns string Expected response to a valid request
   * @throws ApiError
   */
  public static reportTypeList(): CancelablePromise<ReportTypeListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/tag/report_type",
    });
  }

  /**
   * Get a list of project types
   * Gets an array of valid project types
   * @returns string Expected response to a valid request
   * @throws ApiError
   */
  public static projectTypeList(): CancelablePromise<ProjectTypeListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/tag/project_type",
    });
  }

  /**
   * Get a list of side types
   * Gets an array of valid side types
   * @returns string Expected response to a valid request
   * @throws ApiError
   */
  public static sideTypeList(): CancelablePromise<SideTypeListResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/tag/side_type",
    });
  }
}

export class MiscService {
  /**
   * Forge Updates JSON file
   * If you're a Forge mod developer, your Modrinth mods have an automatically generated `updates.json` using the
   * [Forge Update Checker](https://docs.minecraftforge.net/en/latest/misc/updatechecker/).
   *
   * The only setup is to insert the URL into the `[[mods]]` section of your `mods.toml` file as such:
   *
   * ```toml
   * [[mods]]
   * # the other stuff here - ID, version, display name, etc.
   * updateJSONURL = "https://api.modrinth.com/updates/{slug|ID}/forge_updates.json"
   * ```
   *
   * Replace `{slug|id}` with the slug or ID of your project.
   *
   * Modrinth will handle the rest! When you update your mod, Forge will notify your users that their copy of your mod is out of date.
   *
   * Make sure that the version format you use for your Modrinth releases is the same as the version format you use in your `mods.toml`.
   * If you use a format such as `1.2.3-forge` or `1.2.3+1.19` with your Modrinth releases but your `mods.toml` only has `1.2.3`,
   * the update checker may not function properly.
   *
   * @param data The data for the request.
   * @param data.idSlug The ID or slug of the project
   * @returns ForgeUpdates Expected response to a valid request
   * @throws ApiError
   */
  public static forgeUpdates(
    data: ForgeUpdatesData,
  ): CancelablePromise<ForgeUpdatesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/updates/{id|slug}/forge_updates.json",
      path: {
        "id|slug": data.idSlug,
      },
      errors: {
        400: "Invalid request",
      },
    });
  }

  /**
   * Various statistics about this Modrinth instance
   * @returns Statistics Expected response to a valid request
   * @throws ApiError
   */
  public static statistics(): CancelablePromise<StatisticsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/statistics",
    });
  }
}
