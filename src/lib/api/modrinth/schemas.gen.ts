// This file is auto-generated by @hey-api/openapi-ts

export const BaseVersionSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'The name of this version',
            example: 'Version 1.0.0'
        },
        version_number: {
            type: 'string',
            description: 'The version number. Ideally will follow semantic versioning',
            example: '1.0.0'
        },
        changelog: {
            type: 'string',
            description: 'The changelog for this version',
            example: 'List of changes in this version: ...',
            nullable: true
        },
        dependencies: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/VersionDependency'
            },
            description: 'A list of specific versions of projects that this version depends on'
        },
        game_versions: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'A list of versions of Minecraft that this version supports',
            example: ['1.16.5', '1.17.1']
        },
        version_type: {
            type: 'string',
            description: 'The release channel for this version',
            enum: ['release', 'beta', 'alpha'],
            example: 'release'
        },
        loaders: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The mod loaders that this version supports. In case of resource packs, use "minecraft"',
            example: ['fabric', 'forge', 'minecraft']
        },
        featured: {
            type: 'boolean',
            description: 'Whether the version is featured or not',
            example: true
        },
        status: {
            type: 'string',
            enum: ['listed', 'archived', 'draft', 'unlisted', 'scheduled', 'unknown'],
            example: 'listed'
        },
        requested_status: {
            type: 'string',
            enum: ['listed', 'archived', 'draft', 'unlisted'],
            nullable: true
        }
    }
} as const;

export const VersionDependencySchema = {
    type: 'object',
    properties: {
        version_id: {
            type: 'string',
            description: 'The ID of the version that this version depends on',
            example: 'IIJJKKLL',
            nullable: true
        },
        project_id: {
            type: 'string',
            description: 'The ID of the project that this version depends on',
            example: 'QQRRSSTT',
            nullable: true
        },
        file_name: {
            type: 'string',
            description: 'The file name of the dependency, mostly used for showing external dependencies on modpacks',
            example: 'sodium-fabric-mc1.19-0.4.2+build.16.jar',
            nullable: true
        },
        dependency_type: {
            type: 'string',
            enum: ['required', 'optional', 'incompatible', 'embedded'],
            description: 'The type of dependency that this version has',
            example: 'required'
        }
    },
    required: ['dependency_type']
} as const;

export const EditableVersionSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseVersion'
        },
        {
            type: 'object',
            properties: {
                primary_file: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    example: ['sha1', 'aaaabbbbccccddddeeeeffffgggghhhhiiiijjjj'],
                    description: 'The hash format and the hash of the new primary file'
                },
                file_types: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/EditableFileType'
                    },
                    description: 'A list of file_types to edit'
                }
            }
        }
    ]
} as const;

export const EditableFileTypeSchema = {
    type: 'object',
    properties: {
        algorithm: {
            type: 'string',
            description: 'The hash algorithm of the hash specified in the hash field',
            example: 'sha1'
        },
        hash: {
            type: 'string',
            description: "The hash of the file you're editing",
            example: 'aaaabbbbccccddddeeeeffffgggghhhhiiiijjjj'
        },
        file_type: {
            type: 'string',
            enum: ['required-resource-pack', 'optional-resource-pack'],
            description: "The hash algorithm of the file you're editing",
            example: 'required-resource-pack',
            nullable: true
        }
    },
    required: ['algorithm', 'hash', 'file_type']
} as const;

export const CreatableVersionSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseVersion'
        },
        {
            type: 'object',
            properties: {
                project_id: {
                    type: 'string',
                    description: 'The ID of the project this version is for',
                    example: 'AABBCCDD'
                },
                file_parts: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'An array of the multipart field names of each file that goes with this version'
                },
                primary_file: {
                    type: 'string',
                    description: 'The multipart field name of the primary file'
                }
            },
            required: ['file_parts', 'project_id', 'name', 'version_number', 'game_versions', 'version_type', 'loaders', 'featured', 'dependencies']
        }
    ]
} as const;

export const CreateVersionBodySchema = {
    type: 'object',
    properties: {
        data: {
            '$ref': '#/components/schemas/CreatableVersion'
        }
    },
    required: ['data']
} as const;

export const VersionSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseVersion'
        },
        {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'The ID of the version, encoded as a base62 string',
                    example: 'IIJJKKLL'
                },
                project_id: {
                    type: 'string',
                    description: 'The ID of the project this version is for',
                    example: 'AABBCCDD'
                },
                author_id: {
                    type: 'string',
                    description: 'The ID of the author who published this version',
                    example: 'EEFFGGHH'
                },
                date_published: {
                    type: 'string',
                    format: 'ISO-8601'
                },
                downloads: {
                    type: 'integer',
                    description: 'The number of times this version has been downloaded'
                },
                changelog_url: {
                    type: 'string',
                    description: 'A link to the changelog for this version. Always null, only kept for legacy compatibility.',
                    deprecated: true,
                    example: null,
                    nullable: true
                },
                files: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/VersionFile'
                    },
                    description: 'A list of files available for download for this version'
                }
            },
            required: ['id', 'project_id', 'author_id', 'date_published', 'downloads', 'files', 'name', 'version_number', 'game_versions', 'version_type', 'loaders', 'featured']
        }
    ]
} as const;

export const VersionFileSchema = {
    type: 'object',
    properties: {
        hashes: {
            '$ref': '#/components/schemas/VersionFileHashes'
        },
        url: {
            type: 'string',
            example: 'https://cdn.modrinth.com/data/AABBCCDD/versions/1.0.0/my_file.jar',
            description: 'A direct link to the file'
        },
        filename: {
            type: 'string',
            example: 'my_file.jar',
            description: 'The name of the file'
        },
        primary: {
            type: 'boolean',
            example: false,
            description: 'Whether this file is the primary one for its version. Only a maximum of one file per version will have this set to true. If there are not any primary files, it can be inferred that the first file is the primary one.'
        },
        size: {
            type: 'integer',
            example: 1097270,
            description: 'The size of the file in bytes'
        },
        file_type: {
            type: 'string',
            enum: ['required-resource-pack', 'optional-resource-pack'],
            description: 'The type of the additional file, used mainly for adding resource packs to datapacks',
            example: 'required-resource-pack',
            nullable: true
        }
    },
    required: ['hashes', 'url', 'filename', 'primary', 'size']
} as const;

export const VersionFileHashesSchema = {
    type: 'object',
    properties: {
        sha512: {
            type: 'string',
            example: '93ecf5fe02914fb53d94aa3d28c1fb562e23985f8e4d48b9038422798618761fe208a31ca9b723667a4e05de0d91a3f86bcd8d018f6a686c39550e21b198d96f'
        },
        sha1: {
            type: 'string',
            example: 'c84dd4b3580c02b79958a0590afd5783d80ef504'
        }
    },
    description: 'A map of hashes of the file. The key is the hashing algorithm and the value is the string version of the hash.'
} as const;

export const GetLatestVersionFromHashBodySchema = {
    type: 'object',
    properties: {
        loaders: {
            type: 'array',
            items: {
                type: 'string',
                example: ['fabric']
            }
        },
        game_versions: {
            type: 'array',
            items: {
                type: 'string'
            },
            example: ['1.18', '1.18.1']
        }
    },
    required: ['loaders', 'game_versions']
} as const;

export const HashVersionMapSchema = {
    description: 'A map from hashes to versions',
    type: 'object',
    additionalProperties: {
        '$ref': '#/components/schemas/Version'
    }
} as const;

export const HashListSchema = {
    description: 'A list of hashes and the algorithm used to create them',
    type: 'object',
    properties: {
        hashes: {
            type: 'array',
            items: {
                type: 'string'
            },
            example: ['ea0f38408102e4d2efd53c2cc11b88b711996b48d8922f76ea6abf731219c5bd1efe39ddf9cce77c54d49a62ff10fb685c00d2e4c524ab99d20f6296677ab2c4', '925a5c4899affa4098d997dfa4a4cb52c636d539e94bc489d1fa034218cb96819a70eb8b01647a39316a59fcfe223c1a8c05ed2e2ae5f4c1e75fa48f6af1c960']
        },
        algorithm: {
            type: 'string',
            enum: ['sha1', 'sha512'],
            example: 'sha512'
        }
    },
    required: ['hashes', 'algorithm']
} as const;

export const GetLatestVersionsFromHashesBodySchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/HashList'
        },
        {
            type: 'object',
            properties: {
                loaders: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    example: ['fabric']
                },
                game_versions: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    example: ['1.18', '1.18.1']
                }
            },
            required: ['loaders', 'game_versions']
        }
    ]
} as const;

export const BaseProjectSchema = {
    type: 'object',
    properties: {
        slug: {
            type: 'string',
            description: `The slug of a project, used for vanity URLs. Regex: \`\`\`^[\w!@$()\`.+,"\-']{3,64}$\`\`\``,
            example: 'my_project'
        },
        title: {
            type: 'string',
            description: 'The title or name of the project',
            example: 'My Project'
        },
        description: {
            type: 'string',
            description: 'A short description of the project',
            example: 'A short description'
        },
        categories: {
            type: 'array',
            items: {
                type: 'string'
            },
            example: ['technology', 'adventure', 'fabric'],
            description: 'A list of the categories that the project has'
        },
        client_side: {
            type: 'string',
            enum: ['required', 'optional', 'unsupported', 'unknown'],
            description: 'The client side support of the project',
            example: 'required'
        },
        server_side: {
            type: 'string',
            enum: ['required', 'optional', 'unsupported', 'unknown'],
            description: 'The server side support of the project',
            example: 'optional'
        }
    }
} as const;

export const ServerRenderedProjectSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseProject'
        },
        {
            type: 'object',
            properties: {
                project_type: {
                    type: 'string',
                    enum: ['mod', 'modpack', 'resourcepack', 'shader'],
                    description: 'The project type of the project',
                    example: 'mod'
                },
                downloads: {
                    type: 'integer',
                    description: 'The total number of downloads of the project'
                },
                icon_url: {
                    type: 'string',
                    example: 'https://cdn.modrinth.com/data/AABBCCDD/b46513nd83hb4792a9a0e1fn28fgi6090c1842639.png',
                    description: "The URL of the project's icon",
                    nullable: true
                },
                color: {
                    type: 'integer',
                    example: 8703084,
                    description: 'The RGB color of the project, automatically generated from the project icon',
                    nullable: true
                },
                thread_id: {
                    type: 'string',
                    example: 'TTUUVVWW',
                    description: 'The ID of the moderation thread associated with this project'
                },
                monetization_status: {
                    type: 'string',
                    enum: ['monetized', 'demonetized', 'force-demonetized']
                }
            },
            required: ['project_type', 'downloads']
        }
    ]
} as const;

export const ProjectResultSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/ServerRenderedProject'
        },
        {
            type: 'object',
            properties: {
                project_id: {
                    type: 'string',
                    description: 'The ID of the project',
                    example: 'AABBCCDD'
                },
                author: {
                    type: 'string',
                    description: "The username of the project's author",
                    example: 'my_user'
                },
                display_categories: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'A list of the categories that the project has which are not secondary',
                    example: ['technology', 'fabric']
                },
                versions: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'A list of the minecraft versions supported by the project',
                    example: ['1.8', '1.8.9']
                },
                follows: {
                    type: 'integer',
                    description: 'The total number of users following the project'
                },
                date_created: {
                    type: 'string',
                    format: 'ISO-8601',
                    description: 'The date the project was added to search'
                },
                date_modified: {
                    type: 'string',
                    format: 'ISO-8601',
                    description: 'The date the project was last modified'
                },
                latest_version: {
                    type: 'string',
                    description: 'The latest version of minecraft that this project supports',
                    example: '1.8.9'
                },
                license: {
                    type: 'string',
                    description: 'The SPDX license ID of a project',
                    example: 'MIT'
                },
                gallery: {
                    type: 'array',
                    description: 'All gallery images attached to the project',
                    example: ['https://cdn.modrinth.com/data/AABBCCDD/images/009b7d8d6e8bf04968a29421117c59b3efe2351a.png', 'https://cdn.modrinth.com/data/AABBCCDD/images/c21776867afb6046fdc3c21dbcf5cc50ae27a236.png'],
                    items: {
                        type: 'string'
                    }
                },
                featured_gallery: {
                    type: 'string',
                    description: 'The featured gallery image of the project',
                    nullable: true
                }
            },
            required: ['slug', 'title', 'description', 'client_side', 'server_side', 'project_id', 'author', 'versions', 'follows', 'date_created', 'date_modified', 'license']
        }
    ]
} as const;

export const NonSearchProjectSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/BaseProject'
        },
        {
            type: 'object',
            properties: {
                body: {
                    type: 'string',
                    description: 'A long form description of the project',
                    example: 'A long body describing my project in detail'
                },
                status: {
                    type: 'string',
                    enum: ['approved', 'archived', 'rejected', 'draft', 'unlisted', 'processing', 'withheld', 'scheduled', 'private', 'unknown'],
                    description: 'The status of the project',
                    example: 'approved'
                },
                requested_status: {
                    type: 'string',
                    enum: ['approved', 'archived', 'unlisted', 'private', 'draft'],
                    description: 'The requested status when submitting for review or scheduling the project for release',
                    nullable: true
                },
                additional_categories: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'A list of categories which are searchable but non-primary',
                    example: ['technology', 'adventure', 'fabric']
                },
                issues_url: {
                    type: 'string',
                    description: 'An optional link to where to submit bugs or issues with the project',
                    example: 'https://github.com/my_user/my_project/issues',
                    nullable: true
                },
                source_url: {
                    type: 'string',
                    description: 'An optional link to the source code of the project',
                    example: 'https://github.com/my_user/my_project',
                    nullable: true
                },
                wiki_url: {
                    type: 'string',
                    description: "An optional link to the project's wiki page or other relevant information",
                    example: 'https://github.com/my_user/my_project/wiki',
                    nullable: true
                },
                discord_url: {
                    type: 'string',
                    description: "An optional invite link to the project's discord",
                    example: 'https://discord.gg/AaBbCcDd',
                    nullable: true
                },
                donation_urls: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/ProjectDonationURL'
                    },
                    description: 'A list of donation links for the project'
                }
            }
        }
    ]
} as const;

export const ProjectDonationURLSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'The ID of the donation platform',
            example: 'patreon'
        },
        platform: {
            type: 'string',
            description: 'The donation platform this link is to',
            example: 'Patreon'
        },
        url: {
            type: 'string',
            description: 'The URL of the donation platform and user',
            example: 'https://www.patreon.com/my_user'
        }
    }
} as const;

export const ModifiableProjectSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/NonSearchProject'
        },
        {
            type: 'object',
            properties: {
                license_id: {
                    type: 'string',
                    description: 'The SPDX license ID of a project',
                    example: 'LGPL-3.0-or-later'
                },
                license_url: {
                    type: 'string',
                    description: 'The URL to this license',
                    nullable: true
                }
            }
        }
    ]
} as const;

export const EditableProjectSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/ModifiableProject'
        },
        {
            type: 'object',
            properties: {
                moderation_message: {
                    type: 'string',
                    description: "The title of the moderators' message for the project",
                    nullable: true
                },
                moderation_message_body: {
                    type: 'string',
                    description: "The body of the moderators' message for the project",
                    nullable: true
                }
            }
        }
    ]
} as const;

export const CreatableProjectSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/ModifiableProject'
        },
        {
            type: 'object',
            properties: {
                project_type: {
                    type: 'string',
                    enum: ['mod', 'modpack'],
                    example: 'modpack'
                },
                initial_versions: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/EditableVersion'
                    },
                    description: 'A list of initial versions to upload with the created project. Deprecated - please upload version files after initial upload.',
                    deprecated: true
                },
                is_draft: {
                    type: 'boolean',
                    description: 'Whether the project should be saved as a draft instead of being sent to moderation for review. Deprecated - please always mark this as true.',
                    example: true,
                    deprecated: true
                },
                gallery_items: {
                    type: 'array',
                    description: 'Gallery images to be uploaded with the created project. Deprecated - please upload gallery images after initial upload.',
                    deprecated: true,
                    items: {
                        '$ref': '#/components/schemas/CreatableProjectGalleryItem'
                    }
                }
            },
            required: ['project_type', 'slug', 'title', 'description', 'body', 'categories', 'client_side', 'server_side', 'license_id']
        }
    ]
} as const;

export const CreatableProjectGalleryItemSchema = {
    type: 'object',
    nullable: true,
    properties: {
        item: {
            type: 'string',
            description: 'The name of the multipart item where the gallery media is located'
        },
        featured: {
            type: 'boolean',
            description: 'Whether the image is featured in the gallery',
            example: true
        },
        title: {
            type: 'string',
            description: 'The title of the gallery image',
            example: 'My awesome screenshot!',
            nullable: true
        },
        description: {
            type: 'string',
            description: 'The description of the gallery image',
            example: 'This awesome screenshot shows all of the blocks in my mod!',
            nullable: true
        },
        ordering: {
            type: 'integer',
            description: 'The order of the gallery image. Gallery images are sorted by this field and then alphabetically by title.',
            example: 0
        }
    }
} as const;

export const ProjectSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/NonSearchProject'
        },
        {
            '$ref': '#/components/schemas/ServerRenderedProject'
        },
        {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    example: 'AABBCCDD',
                    description: 'The ID of the project, encoded as a base62 string'
                },
                team: {
                    type: 'string',
                    example: 'MMNNOOPP',
                    description: 'The ID of the team that has ownership of this project'
                },
                body_url: {
                    type: 'string',
                    deprecated: true,
                    default: null,
                    description: 'The link to the long description of the project. Always null, only kept for legacy compatibility.',
                    example: null,
                    nullable: true
                },
                moderator_message: {
                    '$ref': '#/components/schemas/ModeratorMessage'
                },
                published: {
                    type: 'string',
                    format: 'ISO-8601',
                    description: 'The date the project was published'
                },
                updated: {
                    type: 'string',
                    format: 'ISO-8601',
                    description: 'The date the project was last updated'
                },
                approved: {
                    type: 'string',
                    format: 'ISO-8601',
                    description: "The date the project's status was set to an approved status",
                    nullable: true
                },
                queued: {
                    type: 'string',
                    format: 'ISO-8601',
                    description: "The date the project's status was submitted to moderators for review",
                    nullable: true
                },
                followers: {
                    type: 'integer',
                    description: 'The total number of users following the project'
                },
                license: {
                    '$ref': '#/components/schemas/ProjectLicense'
                },
                versions: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    example: ['IIJJKKLL', 'QQRRSSTT'],
                    description: 'A list of the version IDs of the project (will never be empty unless `draft` status)'
                },
                game_versions: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    example: ['1.19', '1.19.1', '1.19.2', '1.19.3'],
                    description: 'A list of all of the game versions supported by the project'
                },
                loaders: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    example: ['forge', 'fabric', 'quilt'],
                    description: 'A list of all of the loaders supported by the project'
                },
                gallery: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/GalleryImage'
                    },
                    description: "A list of images that have been uploaded to the project's gallery"
                }
            },
            required: ['id', 'team', 'published', 'updated', 'followers', 'title', 'description', 'categories', 'client_side', 'server_side', 'slug', 'body', 'status']
        }
    ]
} as const;

export const ModeratorMessageSchema = {
    deprecated: true,
    type: 'object',
    properties: {
        message: {
            type: 'string',
            description: 'The message that a moderator has left for the project'
        },
        body: {
            type: 'string',
            description: 'The longer body of the message that a moderator has left for the project',
            nullable: true
        }
    },
    nullable: true,
    example: null,
    description: 'A message that a moderator sent regarding the project'
} as const;

export const ProjectLicenseSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'The SPDX license ID of a project',
            example: 'LGPL-3.0-or-later'
        },
        name: {
            type: 'string',
            description: 'The long name of a license',
            example: 'GNU Lesser General Public License v3 or later'
        },
        url: {
            type: 'string',
            description: 'The URL to this license',
            nullable: true
        }
    },
    description: 'The license of the project'
} as const;

export const GalleryImageSchema = {
    type: 'object',
    nullable: true,
    properties: {
        url: {
            type: 'string',
            description: 'The URL of the gallery image',
            example: 'https://cdn.modrinth.com/data/AABBCCDD/images/009b7d8d6e8bf04968a29421117c59b3efe2351a.png'
        },
        featured: {
            type: 'boolean',
            description: 'Whether the image is featured in the gallery',
            example: true
        },
        title: {
            type: 'string',
            description: 'The title of the gallery image',
            example: 'My awesome screenshot!',
            nullable: true
        },
        description: {
            type: 'string',
            description: 'The description of the gallery image',
            example: 'This awesome screenshot shows all of the blocks in my mod!',
            nullable: true
        },
        created: {
            type: 'string',
            format: 'ISO-8601',
            description: 'The date and time the gallery image was created'
        },
        ordering: {
            type: 'integer',
            description: 'The order of the gallery image. Gallery images are sorted by this field and then alphabetically by title.',
            example: 0
        }
    },
    required: ['url', 'featured', 'created']
} as const;

export const ProjectDependencyListSchema = {
    type: 'object',
    properties: {
        projects: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Project'
            },
            description: 'Projects that the project depends upon'
        },
        versions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Version'
            },
            description: 'Versions that the project depends upon'
        }
    }
} as const;

export const PatchProjectsBodySchema = {
    type: 'object',
    properties: {
        categories: {
            description: 'Set all of the categories to the categories specified here',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        add_categories: {
            description: 'Add all of the categories specified here',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        remove_categories: {
            description: 'Remove all of the categories specified here',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        additional_categories: {
            description: 'Set all of the additional categories to the categories specified here',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        add_additional_categories: {
            description: 'Add all of the additional categories specified here',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        remove_additional_categories: {
            description: 'Remove all of the additional categories specified here',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        donation_urls: {
            description: 'Set all of the donation links to the donation links specified here',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectDonationURL'
            }
        },
        add_donation_urls: {
            description: 'Add all of the donation links specified here',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectDonationURL'
            }
        },
        remove_donation_urls: {
            description: 'Remove all of the donation links specified here',
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectDonationURL'
            }
        },
        issues_url: {
            type: 'string',
            description: 'An optional link to where to submit bugs or issues with the projects',
            example: 'https://github.com/my_user/my_project/issues',
            nullable: true
        },
        source_url: {
            type: 'string',
            description: 'An optional link to the source code of the projects',
            example: 'https://github.com/my_user/my_project',
            nullable: true
        },
        wiki_url: {
            type: 'string',
            description: "An optional link to the projects' wiki page or other relevant information",
            example: 'https://github.com/my_user/my_project/wiki',
            nullable: true
        },
        discord_url: {
            type: 'string',
            description: "An optional invite link to the projects' discord",
            example: 'https://discord.gg/AaBbCcDd',
            nullable: true
        }
    }
} as const;

export const CreateProjectBodySchema = {
    type: 'object',
    properties: {
        data: {
            '$ref': '#/components/schemas/CreatableProject'
        },
        icon: {
            type: 'string',
            format: 'binary',
            enum: ['*.png', '*.jpg', '*.jpeg', '*.bmp', '*.gif', '*.webp', '*.svg', '*.svgz', '*.rgb'],
            description: 'Project icon file'
        }
    },
    required: ['data']
} as const;

export const ProjectIdentifierSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            example: 'AABBCCDD'
        }
    }
} as const;

export const ScheduleSchema = {
    type: 'object',
    properties: {
        time: {
            type: 'string',
            format: 'ISO-8601',
            example: '2023-02-05T19:39:55.551839Z'
        },
        requested_status: {
            type: 'string',
            enum: ['approved', 'archived', 'unlisted', 'private', 'draft'],
            description: 'The requested status when scheduling the project for release'
        }
    },
    required: ['time', 'requested_status']
} as const;

export const SearchResultsSchema = {
    type: 'object',
    properties: {
        hits: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProjectResult'
            },
            description: 'The list of results'
        },
        offset: {
            type: 'integer',
            description: 'The number of results that were skipped by the query',
            example: 0
        },
        limit: {
            type: 'integer',
            description: 'The number of results that were returned by the query',
            example: 10
        },
        total_hits: {
            type: 'integer',
            description: 'The total number of results that match the query',
            example: 10
        }
    },
    required: ['hits', 'offset', 'limit', 'total_hits']
} as const;

export const UserIdentifierSchema = {
    properties: {
        user_id: {
            type: 'string',
            example: 'EEFFGGHH'
        }
    },
    required: ['user_id']
} as const;

export const EditableUserSchema = {
    type: 'object',
    properties: {
        username: {
            type: 'string',
            description: "The user's username",
            example: 'my_user'
        },
        name: {
            type: 'string',
            example: 'My User',
            description: "The user's display name",
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            description: "The user's email (only displayed if requesting your own account). Requires `USER_READ_EMAIL` PAT scope.",
            nullable: true
        },
        bio: {
            type: 'string',
            example: 'My short biography',
            description: 'A description of the user'
        },
        payout_data: {
            '$ref': '#/components/schemas/UserPayoutData'
        }
    },
    required: ['username']
} as const;

export const UserPayoutDataSchema = {
    type: 'object',
    description: "Various data relating to the user's payouts status (you can only see your own)",
    nullable: true,
    properties: {
        balance: {
            type: 'integer',
            description: 'The payout balance available for the user to withdraw (note, you cannot modify this in a PATCH request)',
            example: 10.11223344556678
        },
        payout_wallet: {
            type: 'string',
            enum: ['paypal', 'venmo'],
            description: 'The wallet that the user has selected',
            example: 'paypal'
        },
        payout_wallet_type: {
            type: 'string',
            enum: ['email', 'phone', 'user_handle'],
            description: "The type of the user's wallet",
            example: 'email'
        },
        payout_address: {
            type: 'string',
            description: "The user's payout address",
            example: 'support@modrinth.com'
        }
    }
} as const;

export const UserSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/EditableUser'
        },
        {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    example: 'EEFFGGHH',
                    description: "The user's ID"
                },
                avatar_url: {
                    type: 'string',
                    example: 'https://avatars.githubusercontent.com/u/11223344?v=1',
                    description: "The user's avatar url"
                },
                created: {
                    type: 'string',
                    format: 'ISO-8601',
                    description: 'The time at which the user was created'
                },
                role: {
                    type: 'string',
                    enum: ['admin', 'moderator', 'developer'],
                    description: "The user's role",
                    example: 'developer'
                },
                badges: {
                    type: 'integer',
                    format: 'bitfield',
                    example: 63,
                    description: `Any badges applicable to this user. These are currently unused and undisplayed, and as such are subject to change

In order from first to seventh bit, the current bits are:
- (unused)
- EARLY_MODPACK_ADOPTER
- EARLY_RESPACK_ADOPTER
- EARLY_PLUGIN_ADOPTER
- ALPHA_TESTER
- CONTRIBUTOR
- TRANSLATOR
`
                },
                auth_providers: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    example: ['github', 'gitlab', 'steam', 'microsoft', 'google', 'discord'],
                    description: 'A list of authentication providers you have signed up for (only displayed if requesting your own account)',
                    nullable: true
                },
                email_verified: {
                    type: 'boolean',
                    description: 'Whether your email is verified (only displayed if requesting your own account)',
                    nullable: true
                },
                has_password: {
                    type: 'boolean',
                    description: 'Whether you have a password associated with your account (only displayed if requesting your own account)',
                    nullable: true
                },
                has_totp: {
                    type: 'boolean',
                    description: 'Whether you have TOTP two-factor authentication connected to your account (only displayed if requesting your own account)',
                    nullable: true
                },
                github_id: {
                    deprecated: true,
                    type: 'integer',
                    description: 'Deprecated - this is no longer public for security reasons and is always null',
                    example: null,
                    nullable: true
                }
            },
            required: ['id', 'avatar_url', 'created', 'role']
        }
    ]
} as const;

export const UserPayoutHistorySchema = {
    type: 'object',
    properties: {
        all_time: {
            type: 'string',
            description: 'The all-time balance accrued by this user in USD',
            example: 10.11223344556678
        },
        last_month: {
            type: 'string',
            description: 'The amount in USD made by the user in the previous 30 days',
            example: 2.2244668800224465
        },
        payouts: {
            type: 'array',
            description: "A history of all of the user's past transactions",
            items: {
                '$ref': '#/components/schemas/UserPayoutHistoryEntry'
            }
        }
    }
} as const;

export const UserPayoutHistoryEntrySchema = {
    type: 'object',
    properties: {
        created: {
            type: 'string',
            format: 'ISO-8601',
            description: 'The date of this transaction'
        },
        amount: {
            type: 'integer',
            description: 'The amount of this transaction in USD',
            example: 10
        },
        status: {
            type: 'string',
            description: 'The status of this transaction',
            example: 'success'
        }
    }
} as const;

export const NotificationSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'The id of the notification',
            example: 'UUVVWWXX'
        },
        user_id: {
            type: 'string',
            description: 'The id of the user who received the notification',
            example: 'EEFFGGHH'
        },
        type: {
            type: 'string',
            enum: ['project_update', 'team_invite', 'status_change', 'moderator_message'],
            description: 'The type of notification',
            example: 'project_update',
            nullable: true
        },
        title: {
            type: 'string',
            description: 'The title of the notification',
            example: '**My Project** has been updated!'
        },
        text: {
            type: 'string',
            description: 'The body text of the notification',
            example: 'The project, My Project, has released a new version: 1.0.0'
        },
        link: {
            type: 'string',
            description: 'A link to the related project or version',
            example: 'mod/AABBCCDD/version/IIJJKKLL'
        },
        read: {
            type: 'boolean',
            example: false,
            description: 'Whether the notification has been read or not'
        },
        created: {
            type: 'string',
            format: 'ISO-8601',
            description: 'The time at which the notification was created'
        },
        actions: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NotificationAction'
            },
            description: 'A list of actions that can be performed'
        }
    },
    required: ['id', 'user_id', 'title', 'text', 'link', 'read', 'created', 'actions']
} as const;

export const NotificationActionSchema = {
    type: 'object',
    description: 'An action that can be performed on a notification',
    properties: {
        title: {
            type: 'string',
            description: 'The friendly name for this action',
            example: 'Accept'
        },
        action_route: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'The HTTP code and path to request in order to perform this action.',
            example: ['POST', 'team/{id}/join']
        }
    }
} as const;

export const CreatableReportSchema = {
    type: 'object',
    properties: {
        report_type: {
            type: 'string',
            description: 'The type of the report being sent',
            example: 'copyright'
        },
        item_id: {
            type: 'string',
            description: 'The ID of the item (project, version, or user) being reported',
            example: 'EEFFGGHH'
        },
        item_type: {
            type: 'string',
            enum: ['project', 'user', 'version'],
            description: 'The type of the item being reported',
            example: 'project'
        },
        body: {
            type: 'string',
            description: 'The extended explanation of the report',
            example: 'This is a reupload of my mod, AABBCCDD!'
        }
    },
    required: ['report_type', 'item_id', 'item_type', 'body']
} as const;

export const ReportSchema = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/CreatableReport'
        },
        {
            type: 'object',
            properties: {
                id: {
                    type: 'string',
                    description: 'The ID of the report',
                    example: 'VVWWXXYY'
                },
                reporter: {
                    type: 'string',
                    description: 'The ID of the user who reported the item',
                    example: 'UUVVWWXX'
                },
                created: {
                    type: 'string',
                    format: 'ISO-8601',
                    description: 'The time at which the report was created'
                },
                closed: {
                    type: 'boolean',
                    description: 'Whether the report is resolved'
                },
                thread_id: {
                    type: 'string',
                    example: 'TTUUVVWW',
                    description: 'The ID of the moderation thread associated with this report'
                }
            },
            required: ['reporter', 'created', 'closed', 'thread_id']
        }
    ]
} as const;

export const ThreadSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            example: 'WWXXYYZZ',
            description: 'The ID of the thread'
        },
        type: {
            type: 'string',
            enum: ['project', 'report', 'direct_message']
        },
        project_id: {
            type: 'string',
            nullable: true,
            description: 'The ID of the associated project if a project thread'
        },
        report_id: {
            type: 'string',
            nullable: true,
            description: 'The ID of the associated report if a report thread'
        },
        messages: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ThreadMessage'
            }
        },
        members: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        }
    },
    required: ['id', 'type', 'messages', 'members']
} as const;

export const ThreadMessageSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            description: 'The ID of the message itself',
            example: 'MMNNOOPP'
        },
        author_id: {
            type: 'string',
            description: 'The ID of the author',
            example: 'QQRRSSTT',
            nullable: true
        },
        body: {
            '$ref': '#/components/schemas/ThreadMessageBody'
        },
        created: {
            type: 'string',
            format: 'ISO-8601',
            description: 'The time at which the message was created'
        }
    },
    required: ['id', 'body', 'created']
} as const;

export const ThreadMessageBodySchema = {
    type: 'object',
    description: 'The contents of the message. **Fields will vary depending on message type.**',
    properties: {
        type: {
            type: 'string',
            enum: ['status_change', 'text', 'thread_closure', 'deleted'],
            description: 'The type of message',
            example: 'status_change'
        },
        body: {
            type: 'string',
            description: 'The actual message text. **Only present for `text` message type**',
            example: 'This is the text of the message.'
        },
        private: {
            type: 'boolean',
            description: 'Whether the message is only visible to moderators. **Only present for `text` message type**',
            example: false
        },
        replying_to: {
            type: 'string',
            description: 'The ID of the message being replied to by this message. **Only present for `text` message type**',
            nullable: true,
            example: 'SSTTUUVV'
        },
        old_status: {
            type: 'string',
            enum: ['approved', 'archived', 'rejected', 'draft', 'unlisted', 'processing', 'withheld', 'scheduled', 'private', 'unknown'],
            description: 'The old status of the project. **Only present for `status_change` message type**',
            example: 'processing'
        },
        new_status: {
            type: 'string',
            enum: ['approved', 'archived', 'rejected', 'draft', 'unlisted', 'processing', 'withheld', 'scheduled', 'private', 'unknown'],
            description: 'The new status of the project. **Only present for `status_change` message type**',
            example: 'approved'
        }
    },
    required: ['type']
} as const;

export const TeamMemberSchema = {
    type: 'object',
    properties: {
        team_id: {
            type: 'string',
            example: 'MMNNOOPP',
            description: 'The ID of the team this team member is a member of'
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        role: {
            type: 'string',
            example: 'Member',
            description: "The user's role on the team"
        },
        permissions: {
            type: 'integer',
            format: 'bitfield',
            example: 127,
            description: `The user's permissions in bitfield format (requires authorization to view)

In order from first to tenth bit, the bits are:
- UPLOAD_VERSION
- DELETE_VERSION
- EDIT_DETAILS
- EDIT_BODY
- MANAGE_INVITES
- REMOVE_MEMBER
- EDIT_MEMBER
- DELETE_PROJECT
- VIEW_ANALYTICS
- VIEW_PAYOUTS
`
        },
        accepted: {
            type: 'boolean',
            example: true,
            description: 'Whether or not the user has accepted to be on the team (requires authorization to view)'
        },
        payouts_split: {
            type: 'integer',
            example: 100,
            description: 'The split of payouts going to this user. The proportion of payouts they get is their split divided by the sum of the splits of all members.'
        },
        ordering: {
            type: 'integer',
            example: 0,
            description: 'The order of the team member.'
        }
    },
    required: ['team_id', 'user', 'role', 'accepted']
} as const;

export const CategoryTagSchema = {
    type: 'object',
    properties: {
        icon: {
            type: 'string',
            description: 'The SVG icon of a category',
            example: '<svg></svg>'
        },
        name: {
            type: 'string',
            description: 'The name of the category',
            example: 'adventure'
        },
        project_type: {
            type: 'string',
            description: 'The project type this category is applicable to',
            example: 'mod'
        },
        header: {
            type: 'string',
            description: 'The header under which the category should go',
            example: 'resolutions'
        }
    },
    required: ['icon', 'name', 'project_type', 'header']
} as const;

export const LoaderTagSchema = {
    type: 'object',
    properties: {
        icon: {
            type: 'string',
            description: 'The SVG icon of a loader',
            example: '<svg></svg>'
        },
        name: {
            type: 'string',
            description: 'The name of the loader',
            example: 'fabric'
        },
        supported_project_types: {
            type: 'array',
            items: {
                type: 'string',
                description: 'The project type'
            },
            description: 'The project types that this loader is applicable to',
            example: ['mod', 'modpack']
        }
    },
    required: ['icon', 'name', 'supported_project_types']
} as const;

export const GameVersionTagSchema = {
    type: 'object',
    properties: {
        version: {
            type: 'string',
            description: 'The name/number of the game version',
            example: '1.18.1'
        },
        version_type: {
            type: 'string',
            enum: ['release', 'snapshot', 'alpha', 'beta'],
            description: 'The type of the game version',
            example: 'release'
        },
        date: {
            type: 'string',
            format: 'ISO-8601',
            description: 'The date of the game version release'
        },
        major: {
            type: 'boolean',
            description: 'Whether or not this is a major version, used for Featured Versions',
            example: true
        }
    },
    required: ['version', 'version_type', 'date', 'major']
} as const;

export const DonationPlatformTagSchema = {
    type: 'object',
    properties: {
        short: {
            type: 'string',
            description: 'The short identifier of the donation platform',
            example: 'bmac'
        },
        name: {
            type: 'string',
            description: 'The full name of the donation platform',
            example: 'Buy Me a Coffee'
        }
    },
    required: ['short', 'name']
} as const;

export const ModifyTeamMemberBodySchema = {
    properties: {
        role: {
            type: 'string',
            example: 'Contributor'
        },
        permissions: {
            type: 'integer',
            format: 'bitfield',
            example: 127,
            description: `The user's permissions in bitfield format

In order from first to tenth bit, the bits are:
- UPLOAD_VERSION
- DELETE_VERSION
- EDIT_DETAILS
- EDIT_BODY
- MANAGE_INVITES
- REMOVE_MEMBER
- EDIT_MEMBER
- DELETE_PROJECT
- VIEW_ANALYTICS
- VIEW_PAYOUTS
`
        },
        payouts_split: {
            type: 'integer',
            example: 100,
            description: 'The split of payouts going to this user. The proportion of payouts they get is their split divided by the sum of the splits of all members.'
        },
        ordering: {
            type: 'integer',
            example: 0,
            description: 'The order of the team member.'
        }
    }
} as const;

export const LicenseTagSchema = {
    type: 'object',
    description: 'A short overview of a license',
    properties: {
        short: {
            type: 'string',
            description: 'The short identifier of the license',
            example: 'lgpl-3'
        },
        name: {
            type: 'string',
            description: 'The full name of the license',
            example: 'GNU Lesser General Public License v3'
        }
    },
    required: ['short', 'name']
} as const;

export const LicenseSchema = {
    type: 'object',
    description: 'A full license',
    properties: {
        title: {
            type: 'string',
            example: 'GNU Lesser General Public License v3.0 or later'
        },
        body: {
            type: 'string',
            example: 'Insert the entire text of the LGPL-3.0 here...'
        }
    }
} as const;

export const InvalidInputErrorSchema = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'The name of the error',
            example: 'invalid_input'
        },
        description: {
            type: 'string',
            description: 'The contents of the error',
            example: 'Error while parsing multipart payload'
        }
    },
    required: ['error', 'description']
} as const;

export const AuthErrorSchema = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            description: 'The name of the error',
            example: 'unauthorized'
        },
        description: {
            type: 'string',
            description: 'The contents of the error',
            example: 'Authentication Error: Invalid Authentication Credentials'
        }
    },
    required: ['error', 'description']
} as const;

export const StatisticsSchema = {
    type: 'object',
    properties: {
        projects: {
            type: 'integer',
            description: 'Number of projects on Modrinth'
        },
        versions: {
            type: 'integer',
            description: 'Number of projects on Modrinth'
        },
        files: {
            type: 'integer',
            description: 'Number of version files on Modrinth'
        },
        authors: {
            type: 'integer',
            description: 'Number of authors (users with projects) on Modrinth'
        }
    }
} as const;

export const ForgeUpdatesSchema = {
    type: 'object',
    description: "Mod version information that can be consumed by Forge's update checker",
    properties: {
        homepage: {
            type: 'string',
            description: 'A link to the mod page',
            example: 'https://modrinth.com'
        },
        promos: {
            '$ref': '#/components/schemas/ForgeUpdateCheckerPromos'
        }
    }
} as const;

export const ForgeUpdateCheckerPromosSchema = {
    type: 'object',
    description: 'A list of the recommended and latest versions for each Minecraft release',
    properties: {
        '{version}-recommended': {
            type: 'string',
            description: 'The mod version that is recommended for `{version}`. Excludes versions with the `alpha` and `beta` version types.'
        },
        '{version}-latest': {
            type: 'string',
            description: 'The latest mod version for `{version}`. Shows versions with the `alpha` and `beta` version types.'
        }
    }
} as const;