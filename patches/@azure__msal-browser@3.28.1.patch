diff --git a/dist/interaction_client/PopupClient.mjs b/dist/interaction_client/PopupClient.mjs
index c70893819444b734aa8edc7435fe736130a8f159..7c8e99b1ad5c0ca2d7dc999f63d140d0137fd2ff 100644
--- a/dist/interaction_client/PopupClient.mjs
+++ b/dist/interaction_client/PopupClient.mjs
@@ -1,5 +1,6 @@
 /*! @azure/msal-browser v3.28.1 2025-01-14 */
 'use strict';
+import { once } from "@tauri-apps/api/event";
 import { OIDC_DEFAULT_SCOPES, invokeAsync, PerformanceEvents, invoke, ThrottlingUtils, ProtocolUtils, AuthError, ProtocolMode, UrlString, ServerResponseType } from '@azure/msal-common/browser';
 import { StandardInteractionClient } from './StandardInteractionClient.mjs';
 import { EventType } from '../event/EventType.mjs';
@@ -271,47 +272,60 @@ class PopupClient extends StandardInteractionClient {
      * @param timeout - timeout for processing hash once popup is redirected back to application
      */
     monitorPopupForHash(popupWindow, popupWindowParent) {
-        return new Promise((resolve, reject) => {
-            this.logger.verbose("PopupHandler.monitorPopupForHash - polling started");
-            const intervalId = setInterval(() => {
-                // Window is closed
-                if (popupWindow.closed) {
-                    this.logger.error("PopupHandler.monitorPopupForHash - window closed");
-                    clearInterval(intervalId);
-                    reject(createBrowserAuthError(userCancelled));
-                    return;
-                }
-                let href = "";
-                try {
-                    /*
-                     * Will throw if cross origin,
-                     * which should be caught and ignored
-                     * since we need the interval to keep running while on STS UI.
-                     */
-                    href = popupWindow.location.href;
-                }
-                catch (e) { }
-                // Don't process blank pages or cross domain
-                if (!href || href === "about:blank") {
-                    return;
-                }
-                clearInterval(intervalId);
-                let responseString = "";
-                const responseType = this.config.auth.OIDCOptions.serverResponseType;
-                if (popupWindow) {
-                    if (responseType === ServerResponseType.QUERY) {
-                        responseString = popupWindow.location.search;
-                    }
-                    else {
-                        responseString = popupWindow.location.hash;
-                    }
-                }
-                this.logger.verbose("PopupHandler.monitorPopupForHash - popup window is on same origin as caller");
-                resolve(responseString);
-            }, this.config.system.pollIntervalMilliseconds);
-        }).finally(() => {
-            this.cleanPopup(popupWindow, popupWindowParent);
+        let unlisten;
+        let intervalId;
+        
+        const hashHandler = new Promise((resolve, reject) => {
+            unlisten = once("auth-response", (ev) => {
+        	clearInterval(intervalId);
+        	try {
+        		if (typeof ev.payload === "string") {
+        			this.logger.verbose(
+       				"PopupHandler.monitorPopupForHash - popup window is on same origin as caller",
+      			);
+        
+        			const url = new URL(ev.payload);
+       			const responseType =
+       							this.config.auth.OIDCOptions.serverResponseType;
+       						let responseString = "";
+        						if (responseType === ServerResponseType.QUERY) {
+        							responseString = url.search;
+       						} else {
+       							responseString = url.hash;
+       						}
+       
+        						resolve(responseString);
+        						return;
+        					}
+        					throw new Error("Invalid payload");
+        				} catch (error) {
+        					reject(
+        						createBrowserAuthError(BrowserAuthErrorCodes.popupWindowError),
+        					);
+        				}
+        			});
+       		});
+        
+        const closeHandler = new Promise((_, reject) => {
+        	intervalId = setInterval(() => {
+        	// Window is closed
+        	if (popupWindow.closed) {
+        		this.logger.error("PopupHandler.monitorPopupForHash - window closed");
+        		clearInterval(intervalId);
+        		reject(createBrowserAuthError(BrowserAuthErrorCodes.userCancelled));
+        		return;
+        	}
+        	}, this.config.system.pollIntervalMilliseconds);
         });
+        return Promise.race([hashHandler, closeHandler]).finally(() => {
+       	clearInterval(intervalId);
+        	this.cleanPopup(popupWindow, popupWindowParent);
+       	unlisten
+        		?.then((unsubscribe) => unsubscribe())
+        		.catch((e) =>
+     			this.logger.error(e?.message ?? "Failed to unsubscribe."),
+        		);
+         });
     }
     /**
      * @hidden
diff --git a/package.json b/package.json
index df7ed69e0bd8a58b295d104fdf8d36b300a55b72..dab8f9241da0b96bd9ebdd0907fb50711ff31e92 100644
--- a/package.json
+++ b/package.json
@@ -103,6 +103,7 @@
     "typescript": "^4.9.5"
   },
   "dependencies": {
-    "@azure/msal-common": "14.16.0"
+    "@azure/msal-common": "14.16.0",
+    "@tauri-apps/api": "^2.2.0"
   }
 }
